// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=x1); //1 chooses b
    Not16(in=x1, out=x2);
    Mux16(a=x1, b=x2, sel=nx, out=x3);

    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=y2);
    Mux16(a=y1, b=y2, sel=ny, out=y3);

    Add16(a=x3, b=y3, out=out1);
    And16(a=x3, b=y3, out=out2);

    Mux16(a=out2, b=out1, sel=f, out=out3); //f 1 u do add


    Not16(in=out3, out=out4);
    Mux16(a=out3, b=out4, sel=no, out[0..7]=out5, out[8..14]=out6, out[15]=out7); //1 is negation
    Add16(a[0..7]a=out5, a[8..14] = out6, a[15] = out7, b=false,out=out);

    Or8Way(in[0..7]=out5, out=zr1);
    Or8Way(in[0..6]=out6, in[7] = out7, out=zr2);
    Or(a=zr1, b=zr2, out =zr3);
    Not(in=zr3, out=zr);


    Or(a=out7, b=false, out=ng);
    

    //// Replace this comment with your code.
}